name: Generate-Summary

on:
  workflow_call:
    inputs:
      gcchash:
        required: true
        type: string
      orig_gcchash:
        required: false
        type: string
  workflow_dispatch:
    branches:
      - build-frequent
    inputs:
      gcchash:
        description: 'GCC Hash'
        required: true

jobs:
  compare-artifacts:
    if: always() # ensure comparison always runs even on error
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Initalize gcc
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git
          git submodule update --recursive --progress --recommend-shallow

      - name: Pull gcc
        id: gcc-hash
        run: |
          cd gcc
          git checkout master
          git pull

      - name: Create directories
        run: |
          mkdir logs
          mkdir temp
          mkdir summaries

      # Download all workload artifacts

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Download All targets
        uses: ./.github/actions/download-all-comparison-artifacts
        with:
          gcchash: ${{ inputs.gcchash }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Extract artifacts
        run: |
          ls ./temp/
          mkdir -p logs
          unzip ./temp/*report.log.zip -d ./logs || true
          ls logs

      - name: Download artifacts and compare
        run: |
          pip install pygithub requests
          python ./scripts/download_artifacts.py -hash ${{ inputs.gcchash }} -token ${{ secrets.GITHUB_TOKEN }}

      - name: Make artifact zips
        run: |
          zip -r summaries.zip summaries
          zip -r logs.zip logs

      - name: Upload compare summaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.gcchash }}-summaries
          path: |
            summaries.zip
          retention-days: 90

      - name: Upload log failures
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.gcchash }}-logs
          path: |
            logs.zip
          retention-days: 90

    outputs:
      gcchash: ${{ inputs.gcchash }}

  generate-issues:
    if: always() # ensure generate issues always runs even on error
    needs: [compare-artifacts]
    runs-on: ubuntu-22.04
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3

      - name: Download summaries artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.gcchash }}-summaries

      - name: Download logs artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.gcchash }}-logs

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Aggregate information
        run: |
          unzip summaries.zip
          unzip logs.zip
          python ./scripts/aggregate.py \
            -chash ${{ needs.compare-artifacts.outputs.gcchash }} \
            -o issue.md
          cat issue.md

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Trim issue length # reduce the number of lines in final issue so github always creates issue
        run: |
          head -c 65000 issue.md > trimmed_issue.md
          if [ $(cat trimmed_issue.md | wc -l) -ne $(cat issue.md | wc -l) ]; then echo "Issue text has been trimmed. Please check logs for the untrimmed issue." >> trimmed_issue.md; fi
          run_id=${{ github.run_id }} && echo "Associated run is: https://github.com/patrick-rivos/riscv-gnu-toolchain/actions/runs/$run_id" >> trimmed_issue.md
          cat trimmed_issue.md

      - name: Create or update summary issue
        uses: JasonEtco/create-an-issue@v2
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: trimmed_issue.md
          update_existing: true

      - name: UNIMPLEMENTED - Associate issue with project # Only scheduled jobs are guarenteed to track trunk.
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "Do nothing for now. Most github actions only work with classic projects."
          echo "We'll likely need to use the API to implement this"

  regenerate-issues:
    if: ${{ inputs.orig_gcchash }} != '' # Only run if has bisection hash
    needs: [generate-issues]
    runs-on: ubuntu-22.04
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3

      - name: Clear directories
        run: |
          rm -rf logs/*
          rm -rf temp/*
          rm -rf summaries/*

      # Download all workload artifacts

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Download All targets
        uses: ./.github/actions/download-all-comparison-artifacts
        with:
          gcchash: ${{ inputs.orig_gcchash }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Extract artifacts
        run: |
          ls ./temp/
          mkdir -p logs
          unzip ./temp/*report.log.zip -d ./logs || true
          ls logs

      - name: Download artifacts and compare
        run: |
          pip install pygithub requests
          python ./scripts/download_artifacts.py -hash ${{ inputs.orig_gcchash }} -token ${{ secrets.GITHUB_TOKEN }}

      - name: Aggregate information
        run: |
          python ./scripts/aggregate.py \
            -chash ${{ inputs.orig_gcchash }} \
            -o issue.md
          cat issue.md

      - name: Print API usage info
        run: |
          curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/rate_limit

      - name: Trim issue length # reduce the number of lines in final issue so github always creates issue
        run: |
          head -c 65000 issue.md > trimmed_issue.md
          if [ $(cat trimmed_issue.md | wc -l) -ne $(cat issue.md | wc -l) ]; then echo "Issue text has been trimmed. Please check logs for the untrimmed issue." >> trimmed_issue.md; fi
          run_id=${{ github.run_id }} && echo "Associated run is: https://github.com/patrick-rivos/riscv-gnu-toolchain/actions/runs/$run_id" >> trimmed_issue.md
          cat trimmed_issue.md

      - name: Create or update summary issue
        uses: JasonEtco/create-an-issue@v2
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: trimmed_issue.md
          update_existing: true
