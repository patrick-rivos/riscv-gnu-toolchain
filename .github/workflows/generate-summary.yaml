name: Generate-Summary

on:
  workflow_call:
    inputs:
      gcchash:
        required: true
        type: string
  workflow_dispatch:
    branches:
      - build-frequent
    inputs:
      gcchash:
        description: 'GCC Hash'
        required: true

jobs:
  compare-artifacts:
    if: always() # ensure comparison always runs even on error
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Initalize gcc
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git
          git submodule update --recursive --progress --recommend-shallow

      - name: Pull gcc
        id: gcc-hash
        run: |
          cd gcc
          git checkout master
          git pull

      - name: Create directories
        run: |
          mkdir logs
          mkdir temp
          mkdir summaries

      # Download all workload artifacts

      # Download linux
      - name: Download rv32 non-multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv32 non-multilib binary
        if: hashFiles('./temp/gcc-linux-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 non-multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 non-multilib binary
        if: hashFiles('./temp/gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 multilib binary
        if: hashFiles('./temp/gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-linux-rv64gc-lp64d-${{ inputs.gcchash }}-multilib
          path: "./temp"
        continue-on-error: true

     # Download newlib
      - name: Download rv32 non-multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv32 non-multilib binary
        if: hashFiles('./temp/gcc-newlib-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv32gc-ilp32d-${{ inputs.gcchash }}-non-multilib
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 non-multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 non-multilib binary
        if: hashFiles('./temp/gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-non-multilib
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 multilib
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-multilib-report.log
          path: "./temp"
        continue-on-error: true

      - name: Download rv64 multilib binary
        if: hashFiles('./temp/gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-multilib-report.log') == ''
        uses: actions/download-artifact@v3
        with:
          name: gcc-newlib-rv64gc-lp64d-${{ inputs.gcchash }}-multilib
          path: "./temp"
        continue-on-error: true
 
      # End download
 
      - name: Extract artifacts
        run:
          unzip ./temp/*report.log.zip -d ./logs
          ls logs

      - name: Download artifacts and compare
        run: |
          pip install pygithub requests
          python ./scripts/download_artifacts.py -hash ${{ inputs.gcchash }} -token ${{ secrets.GITHUB_TOKEN }}

      - name: Make artifact zips
        run: |
          zip -r summaries.zip summaries
          zip -r logs.zip logs

      - name: Upload compare summaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.gcchash }}-summaries
          path: |
            summaries.zip
          retention-days: 90

      - name: Upload log failures
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.gcchash }}-logs
          path: |
            logs.zip
          retention-days: 90

    outputs:
      gcchash: ${{ inputs.gcchash }}

  generate-issues:
    if: always() # ensure generate issues always runs even on error
    needs: [compare-artifacts]
    runs-on: ubuntu-22.04
    permissions:
      issues: write
    steps:
      - uses: actions/checkout@v3

      - name: Download summaries artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.gcchash }}-summaries

      - name: Download logs artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compare-artifacts.outputs.gcchash }}-logs

      - name: Aggregate information
        run: |
          unzip summaries.zip
          unzip logs.zip
          python ./scripts/aggregate.py \
            -chash ${{ needs.compare-artifacts.outputs.gcchash }} \
            -o issue.md
          cat issue.md

      - name: Trim issue length # reduce the number of lines in final issue so github always creates issue
        run: |
          head -100 issue.md > trimmed_issue.md
          cat trimmed_issue.md

      - uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: trimmed_issue.md
          update_existing: true
