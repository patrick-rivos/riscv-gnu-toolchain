name: Native-Regression-Runner

on:
  push:
    branches:
      - native-builds
  pull_request:
    branches:
      - build-frequent

jobs:
  init-submodules:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Retrieve cache
        id: retrieve-cache
        uses: actions/cache@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Initalize submodules cache
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          git submodule init
          rm -rf gcc
          git clone git://gcc.gnu.org/git/gcc.git
          git submodule update --recursive --progress --recommend-shallow

      - name: Get GCC hash
        id: gcc-hash
        run: |
          cd gcc
          git checkout master
          git pull
          if [ "${{ github.event.inputs.gcchash }}" == "" ]; then
            export GCCHASH=$(git rev-parse HEAD)
          else
            export GCCHASH=${{ github.event.inputs.gcchash }}
          fi
          echo $GCCHASH
          echo "gcchash=$GCCHASH" >> "$GITHUB_OUTPUT"

      - name: Cache submodules
        if: steps.retrieve-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Make cache zip
        run: |
          zip -r cache.zip .git binutils dejagnu gcc gdb glibc musl newlib pk qemu

      # Use artifact rather than cache since cache downloads are flaky/hang.
      # Artifacts are reliable but ~30 min slower to set up.
      # Setup is done on one runner, so this isn't a show stopper.
      - name: Upload git cache
        uses: actions/upload-artifact@v3
        with:
          name: gcc-sources-${{ steps.gcc-hash.outputs.gcchash }}
          path: |
            cache.zip
          retention-days: 5

    outputs:
      gcchash: ${{ steps.gcc-hash.outputs.gcchash }}

  build:
    runs-on: ubuntu-22.04
    needs: [init-submodules]
    environment: production
    steps:
      - name: Remove unneeded frameworks to recover disk space
        run: |
          echo "-- Before --"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          echo "-- After --"
          df -h

      - uses: actions/checkout@v3

      - name: Restore submodules from cache
        uses: actions/download-artifact@v3
        with:
          name: gcc-sources-${{ needs.init-submodules.outputs.gcchash }}

      - name: Restore submodules
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu
          unzip cache.zip

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ needs.init-submodules.outputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          ../configure --prefix=$(pwd)

      - name: Make gcc
        run: |
          cd build
          make -j $(nproc) linux-native

      - name: Remove sources to reclaim disk space
        run: |
          rm -rf .git binutils dejagnu gcc gdb glibc musl newlib pk qemu

      - name: Zip binaries
        run: |
          zip -r bin.zip build/bin

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-binaries
          path: |
            bin.zip
          retention-days: 5
